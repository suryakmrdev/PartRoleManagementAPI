/*
 * Party Role Management
 *
 * This is Swagger UI environment generated for the TMF Party Role Management specification
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using System.Text.Json.Serialization;

namespace PartRoleManagementAPI.Dto
{ 
    /// <summary>
    /// The part played by a party in a given context.
    /// </summary>
    [DataContract]
    public partial class PartyRoleDto : IEquatable<PartyRoleDto>
    {
        /// <summary>
        /// Unique identifier for PartyRoles
        /// </summary>
        /// <value>Unique identifier for PartyRoles</value>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Url used to reference the party role.
        /// </summary>
        /// <value>Url used to reference the party role.</value>

        [JsonPropertyName("href")]
        public string Href { get; set; }

        /// <summary>
        /// A word, term, or phrase by which the PartyRoleDto is known and distinguished from other PartyRoles.
        /// </summary>
        /// <value>A word, term, or phrase by which the PartyRoleDto is known and distinguished from other PartyRoles.</value>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the lifecycle status of the party role.
        /// </summary>
        /// <value>Used to track the lifecycle status of the party role.</value>

        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.
        /// </summary>
        /// <value>A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.</value>

        [JsonPropertyName("statusReason")]
        public string StatusReason { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [JsonPropertyName("account")]
        public List<AccountRefDto> Account { get; set; }

        /// <summary>
        /// Gets or Sets Agreement
        /// </summary>

        [JsonPropertyName("agreement")]
        public List<AgreementRefDto> Agreement { get; set; }

        /// <summary>
        /// Describes the characteristic of a party role.
        /// </summary>
        /// <value>Describes the characteristic of a party role.</value>

        [JsonPropertyName("characteristic")]
        public List<CharacteristicDto> Characteristic { get; set; }

        /// <summary>
        /// Gets or Sets ContactMediumDto
        /// </summary>

        [JsonPropertyName("contactMedium")]
        public List<ContactMediumDto>? ContactMedium { get; set; }

        /// <summary>
        /// Gets or Sets CreditProfileDto
        /// </summary>

        [JsonPropertyName("creditProfile")]
        public List<CreditProfileDto> CreditProfile { get; set; }

        /// <summary>
        /// Gets or Sets EngagedParty
        /// </summary>

        [JsonPropertyName("engagedParty")]
        public RelatedPartyDto EngagedParty { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>

        [JsonPropertyName("paymentMethod")]
        public List<PaymentMethodRefDto> PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RelatedPartyDto
        /// </summary>

        [JsonPropertyName("relatedParty")]
        public List<RelatedPartyDto> RelatedParty { get; set; }

        /// <summary>
        /// The time period that the PartyRoleDto is valid for.
        /// </summary>
        /// <value>The time period that the PartyRoleDto is valid for.</value>

        [JsonPropertyName("validFor")]
        public TimePeriodDto ValidFor { get; set; }

        /// <summary>
        /// When sub-classing, this defines the super-class
        /// </summary>
        /// <value>When sub-classing, this defines the super-class</value>

        [JsonPropertyName("@baseType")]
        public string BaseType { get; set; } = string.Empty;

        /// <summary>
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        /// </summary>
        /// <value>A URI to a JSON-Schema file that defines additional attributes and relationships</value>

        [JsonPropertyName("@schemaLocation")]
        public string SchemaLocation { get; set; } = string.Empty;

        /// <summary>
        /// When sub-classing, this defines the sub-class entity name
        /// </summary>
        /// <value>When sub-classing, this defines the sub-class entity name</value>

        [JsonPropertyName("@type")] 
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartyRole {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusReason: ").Append(StatusReason).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Agreement: ").Append(Agreement).Append("\n");
            sb.Append("  Characteristic: ").Append(Characteristic).Append("\n");
            sb.Append("  ContactMedium: ").Append(ContactMedium).Append("\n");
            sb.Append("  CreditProfile: ").Append(CreditProfile).Append("\n");
            sb.Append("  EngagedParty: ").Append(EngagedParty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RelatedParty: ").Append(RelatedParty).Append("\n");
            sb.Append("  ValidFor: ").Append(ValidFor).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  SchemaLocation: ").Append(SchemaLocation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PartyRoleDto)obj);
        }

        /// <summary>
        /// Returns true if PartyRoleDto instances are equal
        /// </summary>
        /// <param name="other">Instance of PartyRoleDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartyRoleDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    StatusReason == other.StatusReason ||
                    StatusReason != null &&
                    StatusReason.Equals(other.StatusReason)
                ) &&
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.SequenceEqual(other.Account)
                ) &&
                (
                    Agreement == other.Agreement ||
                    Agreement != null &&
                    Agreement.SequenceEqual(other.Agreement)
                ) &&
                (
                    Characteristic == other.Characteristic ||
                    Characteristic != null &&
                    Characteristic.SequenceEqual(other.Characteristic)
                ) &&
                (
                    ContactMedium == other.ContactMedium ||
                    ContactMedium != null &&
                    ContactMedium.SequenceEqual(other.ContactMedium)
                ) &&
                (
                    CreditProfile == other.CreditProfile ||
                    CreditProfile != null &&
                    CreditProfile.SequenceEqual(other.CreditProfile)
                ) &&
                (
                    EngagedParty == other.EngagedParty ||
                    EngagedParty != null &&
                    EngagedParty.Equals(other.EngagedParty)
                ) &&
                (
                    PaymentMethod == other.PaymentMethod ||
                    PaymentMethod != null &&
                    PaymentMethod.SequenceEqual(other.PaymentMethod)
                ) &&
                (
                    RelatedParty == other.RelatedParty ||
                    RelatedParty != null &&
                    RelatedParty.SequenceEqual(other.RelatedParty)
                ) &&
                (
                    ValidFor == other.ValidFor ||
                    ValidFor != null &&
                    ValidFor.Equals(other.ValidFor)
                ) &&
                (
                    BaseType == other.BaseType ||
                    BaseType != null &&
                    BaseType.Equals(other.BaseType)
                ) &&
                (
                    SchemaLocation == other.SchemaLocation ||
                    SchemaLocation != null &&
                    SchemaLocation.Equals(other.SchemaLocation)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (StatusReason != null)
                    hashCode = hashCode * 59 + StatusReason.GetHashCode();
                if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                if (Agreement != null)
                    hashCode = hashCode * 59 + Agreement.GetHashCode();
                if (Characteristic != null)
                    hashCode = hashCode * 59 + Characteristic.GetHashCode();
                if (ContactMedium != null)
                    hashCode = hashCode * 59 + ContactMedium.GetHashCode();
                if (CreditProfile != null)
                    hashCode = hashCode * 59 + CreditProfile.GetHashCode();
                if (EngagedParty != null)
                    hashCode = hashCode * 59 + EngagedParty.GetHashCode();
                if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                if (RelatedParty != null)
                    hashCode = hashCode * 59 + RelatedParty.GetHashCode();
                if (ValidFor != null)
                    hashCode = hashCode * 59 + ValidFor.GetHashCode();
                if (BaseType != null)
                    hashCode = hashCode * 59 + BaseType.GetHashCode();
                if (SchemaLocation != null)
                    hashCode = hashCode * 59 + SchemaLocation.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PartyRoleDto left, PartyRoleDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PartyRoleDto left, PartyRoleDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
