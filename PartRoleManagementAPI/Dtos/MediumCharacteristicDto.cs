/*
 * Party Role Management
 *
 * This is Swagger UI environment generated for the TMF Party Role Management specification
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PartRoleManagementAPI.Dto
{ 
    /// <summary>
    /// Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)
    /// </summary>
    [DataContract]
    public partial class MediumCharacteristicDto : IEquatable<MediumCharacteristicDto>
    {
        /// <summary>
        /// The city
        /// </summary>
        /// <value>The city</value>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…
        /// </summary>
        /// <value>The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…</value>

        [JsonPropertyName("contactType")]
        public string ContactType { get; set; }

        /// <summary>
        /// The country
        /// </summary>
        /// <value>The country</value>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// Full email address in standard format
        /// </summary>
        /// <value>Full email address in standard format</value>

        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The fax number of the contact
        /// </summary>
        /// <value>The fax number of the contact</value>

        [JsonPropertyName("faxNumber")]
        public string FaxNumber { get; set; }

        /// <summary>
        /// The primary phone number of the contact
        /// </summary>
        /// <value>The primary phone number of the contact</value>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>

        [JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// Identifier as a member of a social network
        /// </summary>
        /// <value>Identifier as a member of a social network</value>

        [JsonPropertyName("socialNetworkId")]
        public string SocialNetworkId { get; set; }

        /// <summary>
        /// State or province
        /// </summary>
        /// <value>State or province</value>

        [JsonPropertyName("stateOrProvince")]
        public string StateOrProvince { get; set; }

        /// <summary>
        /// Describes the street
        /// </summary>
        /// <value>Describes the street</value>

        [JsonPropertyName("street1")]
        public string Street1 { get; set; }

        /// <summary>
        /// Complementary street description
        /// </summary>
        /// <value>Complementary street description</value>

        [JsonPropertyName("street2")]
        public string Street2 { get; set; }

        /// <summary>
        /// When sub-classing, this defines the super-class
        /// </summary>
        /// <value>When sub-classing, this defines the super-class</value>

        [JsonPropertyName("@baseType")]
        public string BaseType { get; set; } = string.Empty;

        /// <summary>
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        /// </summary>
        /// <value>A URI to a JSON-Schema file that defines additional attributes and relationships</value>

        [JsonPropertyName("@schemaLocation")]
        public string SchemaLocation { get; set; } = string.Empty;

        /// <summary>
        /// When sub-classing, this defines the sub-class entity name
        /// </summary>
        /// <value>When sub-classing, this defines the sub-class entity name</value>

        [JsonPropertyName("@type")]
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediumCharacteristic {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  SocialNetworkId: ").Append(SocialNetworkId).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("  Street1: ").Append(Street1).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  SchemaLocation: ").Append(SchemaLocation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediumCharacteristicDto)obj);
        }

        /// <summary>
        /// Returns true if MediumCharacteristicDto instances are equal
        /// </summary>
        /// <param name="other">Instance of MediumCharacteristicDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediumCharacteristicDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) &&
                (
                    ContactType == other.ContactType ||
                    ContactType != null &&
                    ContactType.Equals(other.ContactType)
                ) &&
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) &&
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) &&
                (
                    FaxNumber == other.FaxNumber ||
                    FaxNumber != null &&
                    FaxNumber.Equals(other.FaxNumber)
                ) &&
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) &&
                (
                    PostCode == other.PostCode ||
                    PostCode != null &&
                    PostCode.Equals(other.PostCode)
                ) &&
                (
                    SocialNetworkId == other.SocialNetworkId ||
                    SocialNetworkId != null &&
                    SocialNetworkId.Equals(other.SocialNetworkId)
                ) &&
                (
                    StateOrProvince == other.StateOrProvince ||
                    StateOrProvince != null &&
                    StateOrProvince.Equals(other.StateOrProvince)
                ) &&
                (
                    Street1 == other.Street1 ||
                    Street1 != null &&
                    Street1.Equals(other.Street1)
                ) &&
                (
                    Street2 == other.Street2 ||
                    Street2 != null &&
                    Street2.Equals(other.Street2)
                ) &&
                (
                    BaseType == other.BaseType ||
                    BaseType != null &&
                    BaseType.Equals(other.BaseType)
                ) &&
                (
                    SchemaLocation == other.SchemaLocation ||
                    SchemaLocation != null &&
                    SchemaLocation.Equals(other.SchemaLocation)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                if (ContactType != null)
                    hashCode = hashCode * 59 + ContactType.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                if (FaxNumber != null)
                    hashCode = hashCode * 59 + FaxNumber.GetHashCode();
                if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                if (SocialNetworkId != null)
                    hashCode = hashCode * 59 + SocialNetworkId.GetHashCode();
                if (StateOrProvince != null)
                    hashCode = hashCode * 59 + StateOrProvince.GetHashCode();
                if (Street1 != null)
                    hashCode = hashCode * 59 + Street1.GetHashCode();
                if (Street2 != null)
                    hashCode = hashCode * 59 + Street2.GetHashCode();
                if (BaseType != null)
                    hashCode = hashCode * 59 + BaseType.GetHashCode();
                if (SchemaLocation != null)
                    hashCode = hashCode * 59 + SchemaLocation.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MediumCharacteristicDto left, MediumCharacteristicDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediumCharacteristicDto left, MediumCharacteristicDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
