/*
 * Party Role Management
 *
 * This is Swagger UI environment generated for the TMF Party Role Management specification
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

global using System.ComponentModel.DataAnnotations.Schema;
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PartRoleManagementAPI.Dto
{
    /// <summary>
    /// Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.
    /// </summary>
    [DataContract]
    public partial class CreditProfileDto : IEquatable<CreditProfileDto>
    {
        /// <summary>
        /// The date the profile was established
        /// </summary>
        /// <value>The date the profile was established</value>
        [Required]

        [JsonPropertyName("creditProfileDate")]
        public DateTime? CreditProfileDate { get; set; }

        /// <summary>
        /// This is an integer whose value is used to rate the risk
        /// </summary>
        /// <value>This is an integer whose value is used to rate the risk</value>

        [JsonPropertyName("creditRiskRating")]
        public int? CreditRiskRating { get; set; }

        /// <summary>
        /// A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history
        /// </summary>
        /// <value>A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history</value>

        [JsonPropertyName("creditScore")]
        public int? CreditScore { get; set; }

        /// <summary>
        /// The period for which the profile is valid
        /// </summary>
        /// <value>The period for which the profile is valid</value>
        [Required]

        [JsonPropertyName("validFor")]
        public TimePeriodDto ValidFor { get; set; }

        /// <summary>
        /// When sub-classing, this defines the super-class
        /// </summary>
        /// <value>When sub-classing, this defines the super-class</value>

        [JsonPropertyName("@baseType")] 
        public string BaseType { get; set; } = string.Empty;

        /// <summary>
        /// A URI to a JSON-Schema file that defines additional attributes and relationships
        /// </summary>
        /// <value>A URI to a JSON-Schema file that defines additional attributes and relationships</value>

        [JsonPropertyName("@schemaLocation")] 
        public string SchemaLocation { get; set; } = string.Empty;

        /// <summary>
        /// When sub-classing, this defines the sub-class entity name
        /// </summary>
        /// <value>When sub-classing, this defines the sub-class entity name</value>

        [JsonPropertyName("@type")] 
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditProfile {\n");
            sb.Append("  CreditProfileDate: ").Append(CreditProfileDate).Append("\n");
            sb.Append("  CreditRiskRating: ").Append(CreditRiskRating).Append("\n");
            sb.Append("  CreditScore: ").Append(CreditScore).Append("\n");
            sb.Append("  ValidFor: ").Append(ValidFor).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  SchemaLocation: ").Append(SchemaLocation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditProfileDto)obj);
        }

        /// <summary>
        /// Returns true if CreditProfileDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditProfileDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditProfileDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CreditProfileDate == other.CreditProfileDate ||
                    CreditProfileDate != null &&
                    CreditProfileDate.Equals(other.CreditProfileDate)
                ) &&
                (
                    CreditRiskRating == other.CreditRiskRating ||
                    CreditRiskRating != null &&
                    CreditRiskRating.Equals(other.CreditRiskRating)
                ) &&
                (
                    CreditScore == other.CreditScore ||
                    CreditScore != null &&
                    CreditScore.Equals(other.CreditScore)
                ) &&
                (
                    ValidFor == other.ValidFor ||
                    ValidFor != null &&
                    ValidFor.Equals(other.ValidFor)
                ) &&
                (
                    BaseType == other.BaseType ||
                    BaseType != null &&
                    BaseType.Equals(other.BaseType)
                ) &&
                (
                    SchemaLocation == other.SchemaLocation ||
                    SchemaLocation != null &&
                    SchemaLocation.Equals(other.SchemaLocation)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CreditProfileDate != null)
                    hashCode = hashCode * 59 + CreditProfileDate.GetHashCode();
                if (CreditRiskRating != null)
                    hashCode = hashCode * 59 + CreditRiskRating.GetHashCode();
                if (CreditScore != null)
                    hashCode = hashCode * 59 + CreditScore.GetHashCode();
                if (ValidFor != null)
                    hashCode = hashCode * 59 + ValidFor.GetHashCode();
                if (BaseType != null)
                    hashCode = hashCode * 59 + BaseType.GetHashCode();
                if (SchemaLocation != null)
                    hashCode = hashCode * 59 + SchemaLocation.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CreditProfileDto left, CreditProfileDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditProfileDto left, CreditProfileDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
