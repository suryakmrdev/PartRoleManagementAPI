/*
 * Party Role Management
 *
 * This is Swagger UI environment generated for the TMF Party Role Management specification
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PartRoleManagementAPI.Dto
{ 
    /// <summary>
    /// RelatedPartyDto reference. A related party defines party or party role linked to a specific entity.
    /// </summary>
    [DataContract]
    public partial class RelatedPartyRefDto : IEquatable<RelatedPartyRefDto>
    { 
        /// <summary>
        /// Generic attribute indicating the name of the class type of the referred resource entity.
        /// </summary>
        /// <value>Generic attribute indicating the name of the class type of the referred resource entity.</value>

        [DataMember(Name="@referredType")]
        public string ReferredType { get; set; }

        /// <summary>
        /// Reference of the related party, could be a party reference or a party role reference
        /// </summary>
        /// <value>Reference of the related party, could be a party reference or a party role reference</value>

        [DataMember(Name="href")]
        public string Href { get; set; }

        /// <summary>
        /// Unique identifier of a related party
        /// </summary>
        /// <value>Unique identifier of a related party</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the related party
        /// </summary>
        /// <value>Name of the related party</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Role of the related party.
        /// </summary>
        /// <value>Role of the related party.</value>

        [DataMember(Name="role")]
        public string Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelatedPartyRef {\n");
            sb.Append("  ReferredType: ").Append(ReferredType).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RelatedPartyRefDto)obj);
        }

        /// <summary>
        /// Returns true if RelatedPartyRefDto instances are equal
        /// </summary>
        /// <param name="other">Instance of RelatedPartyRefDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedPartyRefDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferredType == other.ReferredType ||
                    ReferredType != null &&
                    ReferredType.Equals(other.ReferredType)
                ) && 
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferredType != null)
                    hashCode = hashCode * 59 + ReferredType.GetHashCode();
                    if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RelatedPartyRefDto left, RelatedPartyRefDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RelatedPartyRefDto left, RelatedPartyRefDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
